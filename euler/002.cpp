// Project Euler #2: Even Fibonacci numbers
/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed N, find the sum of the even-valued terms.
*/

/*
    # Approach to solve it
    1. Define value of any two variable as 1 and 2.
       (let's say a = 1, b = 2)
    2. Run a loop in which b = a + b and a = b(old value) until
       b is less than given N.
    3. In each round, add all b (whoose value is even) and we
       got our answer.
*/ 

#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;

long long evenFibonacci(long long num) {
    long long temp;
    long long sum = 0, a = 1, b = 2;
    while (b < num) {
        if (b % 2 == 0) {
            sum += b;
        }
        temp = a;
        a = b;
        b = temp + a;
    }
    return sum;
}

int main(){
    int t;
    cin >> t;
    for(int a0 = 0; a0 < t; a0++){
        long long n;
        cin >> n;
        cout << evenFibonacci(n) << endl;
    }
    return 0;
}